// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  name           String
  email          String @unique
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  input          Input[]
  results        Result[]
  history        History[]
  feedback       Feedback[]
  sessions       Session[]
}

model Input {
  id             String @id @default(uuid())
  age            Int
  height         Float
  weight         Float
  bmi            Float
  diet           String
  workout        String
  smoking        Boolean
  alcohol        Boolean
  sleepTime      String
  stress         String
  location       String
  roastLevel     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String
  user           User @relation(fields: [userId], references: [id])
  result         Result?
  history        History?
  feedback       Feedback?
}

model Result {
  id             String @id @default(uuid())
  lifeExpectancy Int
  title String?
  roastComment   String
  diseaseRisk    String
  recommendation String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String
  user           User @relation(fields: [userId], references: [id])
  inputId        String @unique
  input          Input @relation(fields: [inputId], references: [id])
}

model History {
  id             String @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String
  user           User @relation(fields: [userId], references: [id])
  inputId        String @unique
  input          Input @relation(fields: [inputId], references: [id])
}

model Feedback {
  id             String @id @default(uuid())
  rating         Int
  tersadarkan    Int
  comment        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String
  user           User @relation(fields: [userId], references: [id])
  inputId        String @unique
  input          Input @relation(fields: [inputId], references: [id])
}

model Session {
  id             String @id @default(cuid())
  expires        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId         String
  user           User @relation(fields: [userId], references: [id])
}
